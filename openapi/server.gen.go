// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	. "github.com/pikachu0310/very-big-medal-pusher-data-server/openapi/models"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// ゲームデータを送信
	// (GET /data)
	GetData(ctx echo.Context, params GetDataParams) error
	// ヘルスチェック
	// (GET /ping)
	GetPing(ctx echo.Context) error
	// ランキングを取得
	// (GET /rankings)
	GetRankings(ctx echo.Context, params GetRankingsParams) error
	// 全ユーザーのメダル総量を取得
	// (GET /total_medals)
	GetTotalMedals(ctx echo.Context) error
	// ユーザーごとのゲームデータを取得
	// (GET /users/{user_id}/data)
	GetUsersUserIdData(ctx echo.Context, userId string) error
	// セーブデータを送信 (v2)
	// (GET /v2/data)
	GetV2Data(ctx echo.Context, params GetV2DataParams) error
	// グローバル統計を取得 (v2)
	// (GET /v2/statistics)
	GetV2Statistics(ctx echo.Context) error
	// ユーザーの最新セーブデータを取得 (v2)
	// (GET /v2/users/{user_id}/data)
	GetV2UsersUserIdData(ctx echo.Context, userId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetData converts echo context to params.
func (w *ServerInterfaceWrapper) GetData(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDataParams
	// ------------- Required query parameter "version" -------------

	err = runtime.BindQueryParameter("form", true, true, "version", ctx.QueryParams(), &params.Version)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter version: %s", err))
	}

	// ------------- Required query parameter "user_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "user_id", ctx.QueryParams(), &params.UserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// ------------- Required query parameter "have_medal" -------------

	err = runtime.BindQueryParameter("form", true, true, "have_medal", ctx.QueryParams(), &params.HaveMedal)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter have_medal: %s", err))
	}

	// ------------- Required query parameter "in_medal" -------------

	err = runtime.BindQueryParameter("form", true, true, "in_medal", ctx.QueryParams(), &params.InMedal)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter in_medal: %s", err))
	}

	// ------------- Required query parameter "out_medal" -------------

	err = runtime.BindQueryParameter("form", true, true, "out_medal", ctx.QueryParams(), &params.OutMedal)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter out_medal: %s", err))
	}

	// ------------- Required query parameter "slot_hit" -------------

	err = runtime.BindQueryParameter("form", true, true, "slot_hit", ctx.QueryParams(), &params.SlotHit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slot_hit: %s", err))
	}

	// ------------- Required query parameter "get_shirbe" -------------

	err = runtime.BindQueryParameter("form", true, true, "get_shirbe", ctx.QueryParams(), &params.GetShirbe)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter get_shirbe: %s", err))
	}

	// ------------- Required query parameter "start_slot" -------------

	err = runtime.BindQueryParameter("form", true, true, "start_slot", ctx.QueryParams(), &params.StartSlot)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter start_slot: %s", err))
	}

	// ------------- Required query parameter "shirbe_buy300" -------------

	err = runtime.BindQueryParameter("form", true, true, "shirbe_buy300", ctx.QueryParams(), &params.ShirbeBuy300)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter shirbe_buy300: %s", err))
	}

	// ------------- Required query parameter "medal_1" -------------

	err = runtime.BindQueryParameter("form", true, true, "medal_1", ctx.QueryParams(), &params.Medal1)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter medal_1: %s", err))
	}

	// ------------- Required query parameter "medal_2" -------------

	err = runtime.BindQueryParameter("form", true, true, "medal_2", ctx.QueryParams(), &params.Medal2)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter medal_2: %s", err))
	}

	// ------------- Required query parameter "medal_3" -------------

	err = runtime.BindQueryParameter("form", true, true, "medal_3", ctx.QueryParams(), &params.Medal3)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter medal_3: %s", err))
	}

	// ------------- Required query parameter "medal_4" -------------

	err = runtime.BindQueryParameter("form", true, true, "medal_4", ctx.QueryParams(), &params.Medal4)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter medal_4: %s", err))
	}

	// ------------- Required query parameter "medal_5" -------------

	err = runtime.BindQueryParameter("form", true, true, "medal_5", ctx.QueryParams(), &params.Medal5)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter medal_5: %s", err))
	}

	// ------------- Required query parameter "R_medal" -------------

	err = runtime.BindQueryParameter("form", true, true, "R_medal", ctx.QueryParams(), &params.RMedal)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter R_medal: %s", err))
	}

	// ------------- Required query parameter "total_play_time" -------------

	err = runtime.BindQueryParameter("form", true, true, "total_play_time", ctx.QueryParams(), &params.TotalPlayTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter total_play_time: %s", err))
	}

	// ------------- Required query parameter "fever" -------------

	err = runtime.BindQueryParameter("form", true, true, "fever", ctx.QueryParams(), &params.Fever)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fever: %s", err))
	}

	// ------------- Required query parameter "sig" -------------

	err = runtime.BindQueryParameter("form", true, true, "sig", ctx.QueryParams(), &params.Sig)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig: %s", err))
	}

	// ------------- Optional query parameter "max_chain_item" -------------

	err = runtime.BindQueryParameter("form", true, false, "max_chain_item", ctx.QueryParams(), &params.MaxChainItem)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max_chain_item: %s", err))
	}

	// ------------- Optional query parameter "max_chain_orange" -------------

	err = runtime.BindQueryParameter("form", true, false, "max_chain_orange", ctx.QueryParams(), &params.MaxChainOrange)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max_chain_orange: %s", err))
	}

	// ------------- Optional query parameter "max_chain_rainbow" -------------

	err = runtime.BindQueryParameter("form", true, false, "max_chain_rainbow", ctx.QueryParams(), &params.MaxChainRainbow)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max_chain_rainbow: %s", err))
	}

	// ------------- Optional query parameter "sugoroku_steps" -------------

	err = runtime.BindQueryParameter("form", true, false, "sugoroku_steps", ctx.QueryParams(), &params.SugorokuSteps)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sugoroku_steps: %s", err))
	}

	// ------------- Optional query parameter "jackpots" -------------

	err = runtime.BindQueryParameter("form", true, false, "jackpots", ctx.QueryParams(), &params.Jackpots)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter jackpots: %s", err))
	}

	// ------------- Optional query parameter "max_jackpot_win" -------------

	err = runtime.BindQueryParameter("form", true, false, "max_jackpot_win", ctx.QueryParams(), &params.MaxJackpotWin)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max_jackpot_win: %s", err))
	}

	// ------------- Optional query parameter "max_total_jackpot" -------------

	err = runtime.BindQueryParameter("form", true, false, "max_total_jackpot", ctx.QueryParams(), &params.MaxTotalJackpot)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max_total_jackpot: %s", err))
	}

	// ------------- Optional query parameter "max_total_ultimate" -------------

	err = runtime.BindQueryParameter("form", true, false, "max_total_ultimate", ctx.QueryParams(), &params.MaxTotalUltimate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max_total_ultimate: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetData(ctx, params)
	return err
}

// GetPing converts echo context to params.
func (w *ServerInterfaceWrapper) GetPing(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPing(ctx)
	return err
}

// GetRankings converts echo context to params.
func (w *ServerInterfaceWrapper) GetRankings(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRankingsParams
	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetRankings(ctx, params)
	return err
}

// GetTotalMedals converts echo context to params.
func (w *ServerInterfaceWrapper) GetTotalMedals(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTotalMedals(ctx)
	return err
}

// GetUsersUserIdData converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersUserIdData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", ctx.Param("user_id"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUsersUserIdData(ctx, userId)
	return err
}

// GetV2Data converts echo context to params.
func (w *ServerInterfaceWrapper) GetV2Data(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV2DataParams
	// ------------- Required query parameter "data" -------------

	err = runtime.BindQueryParameter("form", true, true, "data", ctx.QueryParams(), &params.Data)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter data: %s", err))
	}

	// ------------- Required query parameter "user_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "user_id", ctx.QueryParams(), &params.UserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// ------------- Required query parameter "sig" -------------

	err = runtime.BindQueryParameter("form", true, true, "sig", ctx.QueryParams(), &params.Sig)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetV2Data(ctx, params)
	return err
}

// GetV2Statistics converts echo context to params.
func (w *ServerInterfaceWrapper) GetV2Statistics(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetV2Statistics(ctx)
	return err
}

// GetV2UsersUserIdData converts echo context to params.
func (w *ServerInterfaceWrapper) GetV2UsersUserIdData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", ctx.Param("user_id"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetV2UsersUserIdData(ctx, userId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/data", wrapper.GetData)
	router.GET(baseURL+"/ping", wrapper.GetPing)
	router.GET(baseURL+"/rankings", wrapper.GetRankings)
	router.GET(baseURL+"/total_medals", wrapper.GetTotalMedals)
	router.GET(baseURL+"/users/:user_id/data", wrapper.GetUsersUserIdData)
	router.GET(baseURL+"/v2/data", wrapper.GetV2Data)
	router.GET(baseURL+"/v2/statistics", wrapper.GetV2Statistics)
	router.GET(baseURL+"/v2/users/:user_id/data", wrapper.GetV2UsersUserIdData)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"DQAA//9zwMU8kSsAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
