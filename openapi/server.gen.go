// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	. "github.com/pikachu0310/very-big-medal-pusher-data-server/openapi/models"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// ゲームデータを送信 (非推奨)
	// (GET /data)
	GetData(ctx echo.Context, params GetDataParams) error
	// ヘルスチェック
	// (GET /ping)
	GetPing(ctx echo.Context) error
	// ランキングを取得 (非推奨)
	// (GET /rankings)
	GetRankings(ctx echo.Context, params GetRankingsParams) error
	// 全ユーザーのメダル総量を取得 (非推奨)
	// (GET /total_medals)
	GetTotalMedals(ctx echo.Context) error
	// ユーザーごとのゲームデータを取得 (非推奨)
	// (GET /users/{user_id}/data)
	GetUsersUserIdData(ctx echo.Context, userId string) error
	// セーブデータを送信 (v2・非推奨)
	// (GET /v2/data)
	GetV2Data(ctx echo.Context, params GetV2DataParams) error
	// グローバル統計を取得 (v2・非推奨)
	// (GET /v2/statistics)
	GetV2Statistics(ctx echo.Context) error
	// ユーザーの最新セーブデータを取得 (v2・非推奨)
	// (GET /v2/users/{user_id}/data)
	GetV2UsersUserIdData(ctx echo.Context, userId string) error
	// 実績取得率を取得
	// (GET /v3/achievements/rates)
	GetV3AchievementsRates(ctx echo.Context) error
	// セーブデータを送信 (v3)
	// (GET /v3/data)
	GetV3Data(ctx echo.Context, params GetV3DataParams) error
	// グローバル統計を取得 (v2・上位1000件)
	// (GET /v3/statistics)
	GetV3Statistics(ctx echo.Context) error
	// ユーザーの最新セーブデータを取得 (v3・署名付き)
	// (GET /v3/users/{user_id}/data)
	GetV3UsersUserIdData(ctx echo.Context, userId string, params GetV3UsersUserIdDataParams) error
	// 実績取得率を取得 (v4)
	// (GET /v4/achievements/rates)
	GetV4AchievementsRates(ctx echo.Context) error
	// セーブデータを送信 (v4)
	// (GET /v4/data)
	GetV4Data(ctx echo.Context, params GetV4DataParams) error
	// グローバル統計を取得 (v4・上位1000件・最適化版)
	// (GET /v4/statistics)
	GetV4Statistics(ctx echo.Context) error
	// ユーザーの最新セーブデータを取得 (v4・署名付き)
	// (GET /v4/users/{user_id}/data)
	GetV4UsersUserIdData(ctx echo.Context, userId string, params GetV4UsersUserIdDataParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetData converts echo context to params.
func (w *ServerInterfaceWrapper) GetData(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDataParams
	// ------------- Required query parameter "version" -------------

	err = runtime.BindQueryParameter("form", true, true, "version", ctx.QueryParams(), &params.Version)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter version: %s", err))
	}

	// ------------- Required query parameter "user_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "user_id", ctx.QueryParams(), &params.UserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// ------------- Required query parameter "have_medal" -------------

	err = runtime.BindQueryParameter("form", true, true, "have_medal", ctx.QueryParams(), &params.HaveMedal)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter have_medal: %s", err))
	}

	// ------------- Required query parameter "in_medal" -------------

	err = runtime.BindQueryParameter("form", true, true, "in_medal", ctx.QueryParams(), &params.InMedal)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter in_medal: %s", err))
	}

	// ------------- Required query parameter "out_medal" -------------

	err = runtime.BindQueryParameter("form", true, true, "out_medal", ctx.QueryParams(), &params.OutMedal)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter out_medal: %s", err))
	}

	// ------------- Required query parameter "slot_hit" -------------

	err = runtime.BindQueryParameter("form", true, true, "slot_hit", ctx.QueryParams(), &params.SlotHit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slot_hit: %s", err))
	}

	// ------------- Required query parameter "get_shirbe" -------------

	err = runtime.BindQueryParameter("form", true, true, "get_shirbe", ctx.QueryParams(), &params.GetShirbe)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter get_shirbe: %s", err))
	}

	// ------------- Required query parameter "start_slot" -------------

	err = runtime.BindQueryParameter("form", true, true, "start_slot", ctx.QueryParams(), &params.StartSlot)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter start_slot: %s", err))
	}

	// ------------- Required query parameter "shirbe_buy300" -------------

	err = runtime.BindQueryParameter("form", true, true, "shirbe_buy300", ctx.QueryParams(), &params.ShirbeBuy300)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter shirbe_buy300: %s", err))
	}

	// ------------- Required query parameter "medal_1" -------------

	err = runtime.BindQueryParameter("form", true, true, "medal_1", ctx.QueryParams(), &params.Medal1)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter medal_1: %s", err))
	}

	// ------------- Required query parameter "medal_2" -------------

	err = runtime.BindQueryParameter("form", true, true, "medal_2", ctx.QueryParams(), &params.Medal2)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter medal_2: %s", err))
	}

	// ------------- Required query parameter "medal_3" -------------

	err = runtime.BindQueryParameter("form", true, true, "medal_3", ctx.QueryParams(), &params.Medal3)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter medal_3: %s", err))
	}

	// ------------- Required query parameter "medal_4" -------------

	err = runtime.BindQueryParameter("form", true, true, "medal_4", ctx.QueryParams(), &params.Medal4)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter medal_4: %s", err))
	}

	// ------------- Required query parameter "medal_5" -------------

	err = runtime.BindQueryParameter("form", true, true, "medal_5", ctx.QueryParams(), &params.Medal5)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter medal_5: %s", err))
	}

	// ------------- Required query parameter "R_medal" -------------

	err = runtime.BindQueryParameter("form", true, true, "R_medal", ctx.QueryParams(), &params.RMedal)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter R_medal: %s", err))
	}

	// ------------- Required query parameter "total_play_time" -------------

	err = runtime.BindQueryParameter("form", true, true, "total_play_time", ctx.QueryParams(), &params.TotalPlayTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter total_play_time: %s", err))
	}

	// ------------- Required query parameter "fever" -------------

	err = runtime.BindQueryParameter("form", true, true, "fever", ctx.QueryParams(), &params.Fever)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fever: %s", err))
	}

	// ------------- Required query parameter "sig" -------------

	err = runtime.BindQueryParameter("form", true, true, "sig", ctx.QueryParams(), &params.Sig)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig: %s", err))
	}

	// ------------- Optional query parameter "max_chain_item" -------------

	err = runtime.BindQueryParameter("form", true, false, "max_chain_item", ctx.QueryParams(), &params.MaxChainItem)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max_chain_item: %s", err))
	}

	// ------------- Optional query parameter "max_chain_orange" -------------

	err = runtime.BindQueryParameter("form", true, false, "max_chain_orange", ctx.QueryParams(), &params.MaxChainOrange)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max_chain_orange: %s", err))
	}

	// ------------- Optional query parameter "max_chain_rainbow" -------------

	err = runtime.BindQueryParameter("form", true, false, "max_chain_rainbow", ctx.QueryParams(), &params.MaxChainRainbow)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max_chain_rainbow: %s", err))
	}

	// ------------- Optional query parameter "sugoroku_steps" -------------

	err = runtime.BindQueryParameter("form", true, false, "sugoroku_steps", ctx.QueryParams(), &params.SugorokuSteps)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sugoroku_steps: %s", err))
	}

	// ------------- Optional query parameter "jackpots" -------------

	err = runtime.BindQueryParameter("form", true, false, "jackpots", ctx.QueryParams(), &params.Jackpots)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter jackpots: %s", err))
	}

	// ------------- Optional query parameter "max_jackpot_win" -------------

	err = runtime.BindQueryParameter("form", true, false, "max_jackpot_win", ctx.QueryParams(), &params.MaxJackpotWin)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max_jackpot_win: %s", err))
	}

	// ------------- Optional query parameter "max_total_jackpot" -------------

	err = runtime.BindQueryParameter("form", true, false, "max_total_jackpot", ctx.QueryParams(), &params.MaxTotalJackpot)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max_total_jackpot: %s", err))
	}

	// ------------- Optional query parameter "max_total_ultimate" -------------

	err = runtime.BindQueryParameter("form", true, false, "max_total_ultimate", ctx.QueryParams(), &params.MaxTotalUltimate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max_total_ultimate: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetData(ctx, params)
	return err
}

// GetPing converts echo context to params.
func (w *ServerInterfaceWrapper) GetPing(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPing(ctx)
	return err
}

// GetRankings converts echo context to params.
func (w *ServerInterfaceWrapper) GetRankings(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRankingsParams
	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetRankings(ctx, params)
	return err
}

// GetTotalMedals converts echo context to params.
func (w *ServerInterfaceWrapper) GetTotalMedals(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTotalMedals(ctx)
	return err
}

// GetUsersUserIdData converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersUserIdData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", ctx.Param("user_id"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUsersUserIdData(ctx, userId)
	return err
}

// GetV2Data converts echo context to params.
func (w *ServerInterfaceWrapper) GetV2Data(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV2DataParams
	// ------------- Required query parameter "data" -------------

	err = runtime.BindQueryParameter("form", true, true, "data", ctx.QueryParams(), &params.Data)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter data: %s", err))
	}

	// ------------- Required query parameter "user_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "user_id", ctx.QueryParams(), &params.UserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// ------------- Required query parameter "sig" -------------

	err = runtime.BindQueryParameter("form", true, true, "sig", ctx.QueryParams(), &params.Sig)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetV2Data(ctx, params)
	return err
}

// GetV2Statistics converts echo context to params.
func (w *ServerInterfaceWrapper) GetV2Statistics(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetV2Statistics(ctx)
	return err
}

// GetV2UsersUserIdData converts echo context to params.
func (w *ServerInterfaceWrapper) GetV2UsersUserIdData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", ctx.Param("user_id"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetV2UsersUserIdData(ctx, userId)
	return err
}

// GetV3AchievementsRates converts echo context to params.
func (w *ServerInterfaceWrapper) GetV3AchievementsRates(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetV3AchievementsRates(ctx)
	return err
}

// GetV3Data converts echo context to params.
func (w *ServerInterfaceWrapper) GetV3Data(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV3DataParams
	// ------------- Required query parameter "data" -------------

	err = runtime.BindQueryParameter("form", true, true, "data", ctx.QueryParams(), &params.Data)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter data: %s", err))
	}

	// ------------- Required query parameter "user_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "user_id", ctx.QueryParams(), &params.UserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// ------------- Required query parameter "sig" -------------

	err = runtime.BindQueryParameter("form", true, true, "sig", ctx.QueryParams(), &params.Sig)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetV3Data(ctx, params)
	return err
}

// GetV3Statistics converts echo context to params.
func (w *ServerInterfaceWrapper) GetV3Statistics(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetV3Statistics(ctx)
	return err
}

// GetV3UsersUserIdData converts echo context to params.
func (w *ServerInterfaceWrapper) GetV3UsersUserIdData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", ctx.Param("user_id"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV3UsersUserIdDataParams
	// ------------- Required query parameter "sig" -------------

	err = runtime.BindQueryParameter("form", true, true, "sig", ctx.QueryParams(), &params.Sig)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetV3UsersUserIdData(ctx, userId, params)
	return err
}

// GetV4AchievementsRates converts echo context to params.
func (w *ServerInterfaceWrapper) GetV4AchievementsRates(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetV4AchievementsRates(ctx)
	return err
}

// GetV4Data converts echo context to params.
func (w *ServerInterfaceWrapper) GetV4Data(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV4DataParams
	// ------------- Required query parameter "data" -------------

	err = runtime.BindQueryParameter("form", true, true, "data", ctx.QueryParams(), &params.Data)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter data: %s", err))
	}

	// ------------- Required query parameter "user_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "user_id", ctx.QueryParams(), &params.UserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// ------------- Required query parameter "sig" -------------

	err = runtime.BindQueryParameter("form", true, true, "sig", ctx.QueryParams(), &params.Sig)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetV4Data(ctx, params)
	return err
}

// GetV4Statistics converts echo context to params.
func (w *ServerInterfaceWrapper) GetV4Statistics(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetV4Statistics(ctx)
	return err
}

// GetV4UsersUserIdData converts echo context to params.
func (w *ServerInterfaceWrapper) GetV4UsersUserIdData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", ctx.Param("user_id"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV4UsersUserIdDataParams
	// ------------- Required query parameter "sig" -------------

	err = runtime.BindQueryParameter("form", true, true, "sig", ctx.QueryParams(), &params.Sig)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetV4UsersUserIdData(ctx, userId, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/data", wrapper.GetData)
	router.GET(baseURL+"/ping", wrapper.GetPing)
	router.GET(baseURL+"/rankings", wrapper.GetRankings)
	router.GET(baseURL+"/total_medals", wrapper.GetTotalMedals)
	router.GET(baseURL+"/users/:user_id/data", wrapper.GetUsersUserIdData)
	router.GET(baseURL+"/v2/data", wrapper.GetV2Data)
	router.GET(baseURL+"/v2/statistics", wrapper.GetV2Statistics)
	router.GET(baseURL+"/v2/users/:user_id/data", wrapper.GetV2UsersUserIdData)
	router.GET(baseURL+"/v3/achievements/rates", wrapper.GetV3AchievementsRates)
	router.GET(baseURL+"/v3/data", wrapper.GetV3Data)
	router.GET(baseURL+"/v3/statistics", wrapper.GetV3Statistics)
	router.GET(baseURL+"/v3/users/:user_id/data", wrapper.GetV3UsersUserIdData)
	router.GET(baseURL+"/v4/achievements/rates", wrapper.GetV4AchievementsRates)
	router.GET(baseURL+"/v4/data", wrapper.GetV4Data)
	router.GET(baseURL+"/v4/statistics", wrapper.GetV4Statistics)
	router.GET(baseURL+"/v4/users/:user_id/data", wrapper.GetV4UsersUserIdData)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
