// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	. "github.com/pikachu0310/very-big-medal-pusher-data-server/openapi/models"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// ゲームデータを送信
	// (GET /data)
	GetData(ctx echo.Context, params GetDataParams) error
	// ヘルスチェック
	// (GET /ping)
	GetPing(ctx echo.Context) error
	// ランキングを取得
	// (GET /rankings)
	GetRankings(ctx echo.Context, params GetRankingsParams) error
	// ユーザーごとのゲームデータを取得
	// (GET /users/{user_id}/data)
	GetUsersUserIdData(ctx echo.Context, userId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetData converts echo context to params.
func (w *ServerInterfaceWrapper) GetData(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDataParams
	// ------------- Required query parameter "version" -------------

	err = runtime.BindQueryParameter("form", true, true, "version", ctx.QueryParams(), &params.Version)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter version: %s", err))
	}

	// ------------- Required query parameter "user_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "user_id", ctx.QueryParams(), &params.UserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// ------------- Required query parameter "have_medal" -------------

	err = runtime.BindQueryParameter("form", true, true, "have_medal", ctx.QueryParams(), &params.HaveMedal)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter have_medal: %s", err))
	}

	// ------------- Required query parameter "in_medal" -------------

	err = runtime.BindQueryParameter("form", true, true, "in_medal", ctx.QueryParams(), &params.InMedal)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter in_medal: %s", err))
	}

	// ------------- Required query parameter "out_medal" -------------

	err = runtime.BindQueryParameter("form", true, true, "out_medal", ctx.QueryParams(), &params.OutMedal)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter out_medal: %s", err))
	}

	// ------------- Required query parameter "slot_hit" -------------

	err = runtime.BindQueryParameter("form", true, true, "slot_hit", ctx.QueryParams(), &params.SlotHit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slot_hit: %s", err))
	}

	// ------------- Required query parameter "get_shirbe" -------------

	err = runtime.BindQueryParameter("form", true, true, "get_shirbe", ctx.QueryParams(), &params.GetShirbe)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter get_shirbe: %s", err))
	}

	// ------------- Required query parameter "start_slot" -------------

	err = runtime.BindQueryParameter("form", true, true, "start_slot", ctx.QueryParams(), &params.StartSlot)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter start_slot: %s", err))
	}

	// ------------- Required query parameter "shirbe_buy300" -------------

	err = runtime.BindQueryParameter("form", true, true, "shirbe_buy300", ctx.QueryParams(), &params.ShirbeBuy300)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter shirbe_buy300: %s", err))
	}

	// ------------- Required query parameter "medal_1" -------------

	err = runtime.BindQueryParameter("form", true, true, "medal_1", ctx.QueryParams(), &params.Medal1)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter medal_1: %s", err))
	}

	// ------------- Required query parameter "medal_2" -------------

	err = runtime.BindQueryParameter("form", true, true, "medal_2", ctx.QueryParams(), &params.Medal2)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter medal_2: %s", err))
	}

	// ------------- Required query parameter "medal_3" -------------

	err = runtime.BindQueryParameter("form", true, true, "medal_3", ctx.QueryParams(), &params.Medal3)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter medal_3: %s", err))
	}

	// ------------- Required query parameter "medal_4" -------------

	err = runtime.BindQueryParameter("form", true, true, "medal_4", ctx.QueryParams(), &params.Medal4)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter medal_4: %s", err))
	}

	// ------------- Required query parameter "medal_5" -------------

	err = runtime.BindQueryParameter("form", true, true, "medal_5", ctx.QueryParams(), &params.Medal5)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter medal_5: %s", err))
	}

	// ------------- Required query parameter "R_medal" -------------

	err = runtime.BindQueryParameter("form", true, true, "R_medal", ctx.QueryParams(), &params.RMedal)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter R_medal: %s", err))
	}

	// ------------- Required query parameter "second" -------------

	err = runtime.BindQueryParameter("form", true, true, "second", ctx.QueryParams(), &params.Second)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter second: %s", err))
	}

	// ------------- Required query parameter "minute" -------------

	err = runtime.BindQueryParameter("form", true, true, "minute", ctx.QueryParams(), &params.Minute)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter minute: %s", err))
	}

	// ------------- Required query parameter "hour" -------------

	err = runtime.BindQueryParameter("form", true, true, "hour", ctx.QueryParams(), &params.Hour)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hour: %s", err))
	}

	// ------------- Required query parameter "fever" -------------

	err = runtime.BindQueryParameter("form", true, true, "fever", ctx.QueryParams(), &params.Fever)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fever: %s", err))
	}

	// ------------- Required query parameter "sig" -------------

	err = runtime.BindQueryParameter("form", true, true, "sig", ctx.QueryParams(), &params.Sig)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetData(ctx, params)
	return err
}

// GetPing converts echo context to params.
func (w *ServerInterfaceWrapper) GetPing(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPing(ctx)
	return err
}

// GetRankings converts echo context to params.
func (w *ServerInterfaceWrapper) GetRankings(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRankingsParams
	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetRankings(ctx, params)
	return err
}

// GetUsersUserIdData converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersUserIdData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", ctx.Param("user_id"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUsersUserIdData(ctx, userId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/data", wrapper.GetData)
	router.GET(baseURL+"/ping", wrapper.GetPing)
	router.GET(baseURL+"/rankings", wrapper.GetRankings)
	router.GET(baseURL+"/users/:user_id/data", wrapper.GetUsersUserIdData)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/6yXT08bRxTAv4o17XGxAeMefKNpRThEQrTNJUXWYA/2pN4/mZ1FsZAlZldJSAGFUFpo",
	"oypERMEtBZpUaWniwId5mD+nfIVqZlnvGi8NwXtZrXbn/d6b9+b9mRlUNHXLNIjBbZSfQXaxQnSsXkew",
	"Tr7AHMt3i5kWYZwS9We8oJMSrspXXrMIyiNqcFImDGnobp+JLdpXNEukTIw+cpcz3MdxWQmWJlG+LV2v",
	"a2iKTBMWw6lrqEx4wa5QNkmuqCcCkKoqeJr0ZHcEoHimc4HltBT5bnNGjbL6bPSkvi0ulau3wsAVUYF0",
	"SBrsiTQYIWV7ImUjpKGeSEMRUq4nUs4nUcPhJD7gpsN7Cm0oLzXZpGgapXhN/nkuTDq1bH//FbV1MpTG",
	"qskLFcqvCgzEFYtjxgvy01VpIUDyHJuwQlxGXYYVCEvQNGE2NY2Y1KxrwRdz8jYpSr0qXadMBSJ2kVGL",
	"K1l0c/xaBfPjlQZ4z8CbBW8LvFXwPHD/AW8DvCZ4u+q5Bd5DmF0AdxfcdyA2QWyAeAziwfn17iu1fh1m",
	"F0HsqL9/gPscvAfq7wG4y6ez4vDgGYifwZ0fHhuFWfdbA2mIU16VVt8krJb6nJZTN+QZSo05doWwlCzf",
	"KVm/U8NjoyiyfzSQ7k8PqHNrEQNbFOVRNt2fziINWZhXlPsypbPKXya82wvXbwxfO373qrW0ePh2DYQ0",
	"/Pj1y5PG3JF3r7X+EtzlkS+/BrEZNRwpfQxLxGgJ5dEI4aq9SK0M64QTZqP8rRlEpYo7DmE1pCED63KP",
	"gfUaYuSOQxkpoTxnDtHOOlZsWONRwaFIABVpCZegtfP4Ily7xCcBC4tKErR2jicBi3TmRGwLK0YiuI76",
	"mAQx6LfJsQYTZGUTZA0lyMolwhpPMgn8zpzIFv1xIgmUGkSTAPnD+MeSujtD31fXhwdzn/kN4n1z7nT9",
	"fuvNo9aTN62dX8B7e1Z/T/abIA5AbB6vPD2aW3rffIi0eK/T8kfV6gm52LZMw/ZvK4P+pNRp59H2Rmtv",
	"D8TW4cGvre01ED+CuwBiH8QqiKeyOQ7FiR3uLR5tb4D43d9cymQp8B6D95saB2S7lqK5OFFwX6tGvwRe",
	"s3X/3qnXALehJJv+4OToOmY1tTIYCbpmALUyY8mNhr25q62O+fPRh70Qtem40Wx5i4d72+et8dbkNOP+",
	"C54Ad1PNLru+HQwb31HDn7cusmU8WHOpNm+bTBbxMLglMoWdKj/fa4nh6Ch/q/NjcH4jbTRsghPaZZt6",
	"ler0AiNy/Vp3Dlxw3oqmwYmhnIItq0qLyi2Z27Y/g4Z0yomuBD9lZArl0SeZ8EqeObuPZ9qX8XBYxYzh",
	"mj+rnouqPFR/gbutnn+2T1FXYDuXucutRz+19lf92MostTMzZ8laPz8PdsX5G7lePkZL/zPVyfmyt0ms",
	"V29fzslxTn2hvPi3fIqd7hz1a8ZQTJJ1SC6cvJgH8RzEPLjfq4LzBNwfukITFVkB0YhVGQ2Zujiy6cDb",
	"DqvKnOHcsvOZjOXYlTRn2EqXsU5sVJ+o/xcAAP//XZoWc/kRAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
