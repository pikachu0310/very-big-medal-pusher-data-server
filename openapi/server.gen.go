// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	. "github.com/pikachu0310/very-big-medal-pusher-data-server/openapi/models"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// ゲームデータを送信
	// (GET /data)
	GetData(ctx echo.Context, params GetDataParams) error
	// ヘルスチェック
	// (GET /ping)
	GetPing(ctx echo.Context) error
	// ランキングを取得
	// (GET /rankings)
	GetRankings(ctx echo.Context, params GetRankingsParams) error
	// 全ユーザーのメダル総量を取得
	// (GET /total_medals)
	GetTotalMedals(ctx echo.Context) error
	// ユーザーごとのゲームデータを取得
	// (GET /users/{user_id}/data)
	GetUsersUserIdData(ctx echo.Context, userId string) error
	// セーブデータを送信 (v2)
	// (GET /v2/data)
	GetV2Data(ctx echo.Context, params GetV2DataParams) error
	// グローバル統計を取得 (v2)
	// (GET /v2/statistics)
	GetV2Statistics(ctx echo.Context) error
	// ユーザーの最新セーブデータを取得 (v2)
	// (GET /v2/users/{user_id}/data)
	GetV2UsersUserIdData(ctx echo.Context, userId string) error
	// セーブデータを送信 (v3)
	// (GET /v3/data)
	GetV3Data(ctx echo.Context, params GetV3DataParams) error
	// グローバル統計を取得 (v2・上位1000件)
	// (GET /v3/statistics)
	GetV3Statistics(ctx echo.Context) error
	// ユーザーの最新セーブデータを取得 (v3・署名付き)
	// (GET /v3/users/{user_id}/data)
	GetV3UsersUserIdData(ctx echo.Context, userId string, params GetV3UsersUserIdDataParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetData converts echo context to params.
func (w *ServerInterfaceWrapper) GetData(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDataParams
	// ------------- Required query parameter "version" -------------

	err = runtime.BindQueryParameter("form", true, true, "version", ctx.QueryParams(), &params.Version)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter version: %s", err))
	}

	// ------------- Required query parameter "user_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "user_id", ctx.QueryParams(), &params.UserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// ------------- Required query parameter "have_medal" -------------

	err = runtime.BindQueryParameter("form", true, true, "have_medal", ctx.QueryParams(), &params.HaveMedal)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter have_medal: %s", err))
	}

	// ------------- Required query parameter "in_medal" -------------

	err = runtime.BindQueryParameter("form", true, true, "in_medal", ctx.QueryParams(), &params.InMedal)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter in_medal: %s", err))
	}

	// ------------- Required query parameter "out_medal" -------------

	err = runtime.BindQueryParameter("form", true, true, "out_medal", ctx.QueryParams(), &params.OutMedal)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter out_medal: %s", err))
	}

	// ------------- Required query parameter "slot_hit" -------------

	err = runtime.BindQueryParameter("form", true, true, "slot_hit", ctx.QueryParams(), &params.SlotHit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slot_hit: %s", err))
	}

	// ------------- Required query parameter "get_shirbe" -------------

	err = runtime.BindQueryParameter("form", true, true, "get_shirbe", ctx.QueryParams(), &params.GetShirbe)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter get_shirbe: %s", err))
	}

	// ------------- Required query parameter "start_slot" -------------

	err = runtime.BindQueryParameter("form", true, true, "start_slot", ctx.QueryParams(), &params.StartSlot)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter start_slot: %s", err))
	}

	// ------------- Required query parameter "shirbe_buy300" -------------

	err = runtime.BindQueryParameter("form", true, true, "shirbe_buy300", ctx.QueryParams(), &params.ShirbeBuy300)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter shirbe_buy300: %s", err))
	}

	// ------------- Required query parameter "medal_1" -------------

	err = runtime.BindQueryParameter("form", true, true, "medal_1", ctx.QueryParams(), &params.Medal1)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter medal_1: %s", err))
	}

	// ------------- Required query parameter "medal_2" -------------

	err = runtime.BindQueryParameter("form", true, true, "medal_2", ctx.QueryParams(), &params.Medal2)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter medal_2: %s", err))
	}

	// ------------- Required query parameter "medal_3" -------------

	err = runtime.BindQueryParameter("form", true, true, "medal_3", ctx.QueryParams(), &params.Medal3)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter medal_3: %s", err))
	}

	// ------------- Required query parameter "medal_4" -------------

	err = runtime.BindQueryParameter("form", true, true, "medal_4", ctx.QueryParams(), &params.Medal4)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter medal_4: %s", err))
	}

	// ------------- Required query parameter "medal_5" -------------

	err = runtime.BindQueryParameter("form", true, true, "medal_5", ctx.QueryParams(), &params.Medal5)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter medal_5: %s", err))
	}

	// ------------- Required query parameter "R_medal" -------------

	err = runtime.BindQueryParameter("form", true, true, "R_medal", ctx.QueryParams(), &params.RMedal)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter R_medal: %s", err))
	}

	// ------------- Required query parameter "total_play_time" -------------

	err = runtime.BindQueryParameter("form", true, true, "total_play_time", ctx.QueryParams(), &params.TotalPlayTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter total_play_time: %s", err))
	}

	// ------------- Required query parameter "fever" -------------

	err = runtime.BindQueryParameter("form", true, true, "fever", ctx.QueryParams(), &params.Fever)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fever: %s", err))
	}

	// ------------- Required query parameter "sig" -------------

	err = runtime.BindQueryParameter("form", true, true, "sig", ctx.QueryParams(), &params.Sig)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig: %s", err))
	}

	// ------------- Optional query parameter "max_chain_item" -------------

	err = runtime.BindQueryParameter("form", true, false, "max_chain_item", ctx.QueryParams(), &params.MaxChainItem)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max_chain_item: %s", err))
	}

	// ------------- Optional query parameter "max_chain_orange" -------------

	err = runtime.BindQueryParameter("form", true, false, "max_chain_orange", ctx.QueryParams(), &params.MaxChainOrange)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max_chain_orange: %s", err))
	}

	// ------------- Optional query parameter "max_chain_rainbow" -------------

	err = runtime.BindQueryParameter("form", true, false, "max_chain_rainbow", ctx.QueryParams(), &params.MaxChainRainbow)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max_chain_rainbow: %s", err))
	}

	// ------------- Optional query parameter "sugoroku_steps" -------------

	err = runtime.BindQueryParameter("form", true, false, "sugoroku_steps", ctx.QueryParams(), &params.SugorokuSteps)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sugoroku_steps: %s", err))
	}

	// ------------- Optional query parameter "jackpots" -------------

	err = runtime.BindQueryParameter("form", true, false, "jackpots", ctx.QueryParams(), &params.Jackpots)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter jackpots: %s", err))
	}

	// ------------- Optional query parameter "max_jackpot_win" -------------

	err = runtime.BindQueryParameter("form", true, false, "max_jackpot_win", ctx.QueryParams(), &params.MaxJackpotWin)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max_jackpot_win: %s", err))
	}

	// ------------- Optional query parameter "max_total_jackpot" -------------

	err = runtime.BindQueryParameter("form", true, false, "max_total_jackpot", ctx.QueryParams(), &params.MaxTotalJackpot)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max_total_jackpot: %s", err))
	}

	// ------------- Optional query parameter "max_total_ultimate" -------------

	err = runtime.BindQueryParameter("form", true, false, "max_total_ultimate", ctx.QueryParams(), &params.MaxTotalUltimate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max_total_ultimate: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetData(ctx, params)
	return err
}

// GetPing converts echo context to params.
func (w *ServerInterfaceWrapper) GetPing(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPing(ctx)
	return err
}

// GetRankings converts echo context to params.
func (w *ServerInterfaceWrapper) GetRankings(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRankingsParams
	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetRankings(ctx, params)
	return err
}

// GetTotalMedals converts echo context to params.
func (w *ServerInterfaceWrapper) GetTotalMedals(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTotalMedals(ctx)
	return err
}

// GetUsersUserIdData converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersUserIdData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", ctx.Param("user_id"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUsersUserIdData(ctx, userId)
	return err
}

// GetV2Data converts echo context to params.
func (w *ServerInterfaceWrapper) GetV2Data(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV2DataParams
	// ------------- Required query parameter "data" -------------

	err = runtime.BindQueryParameter("form", true, true, "data", ctx.QueryParams(), &params.Data)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter data: %s", err))
	}

	// ------------- Required query parameter "user_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "user_id", ctx.QueryParams(), &params.UserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// ------------- Required query parameter "sig" -------------

	err = runtime.BindQueryParameter("form", true, true, "sig", ctx.QueryParams(), &params.Sig)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetV2Data(ctx, params)
	return err
}

// GetV2Statistics converts echo context to params.
func (w *ServerInterfaceWrapper) GetV2Statistics(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetV2Statistics(ctx)
	return err
}

// GetV2UsersUserIdData converts echo context to params.
func (w *ServerInterfaceWrapper) GetV2UsersUserIdData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", ctx.Param("user_id"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetV2UsersUserIdData(ctx, userId)
	return err
}

// GetV3Data converts echo context to params.
func (w *ServerInterfaceWrapper) GetV3Data(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV3DataParams
	// ------------- Required query parameter "data" -------------

	err = runtime.BindQueryParameter("form", true, true, "data", ctx.QueryParams(), &params.Data)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter data: %s", err))
	}

	// ------------- Required query parameter "user_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "user_id", ctx.QueryParams(), &params.UserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// ------------- Required query parameter "sig" -------------

	err = runtime.BindQueryParameter("form", true, true, "sig", ctx.QueryParams(), &params.Sig)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetV3Data(ctx, params)
	return err
}

// GetV3Statistics converts echo context to params.
func (w *ServerInterfaceWrapper) GetV3Statistics(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetV3Statistics(ctx)
	return err
}

// GetV3UsersUserIdData converts echo context to params.
func (w *ServerInterfaceWrapper) GetV3UsersUserIdData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", ctx.Param("user_id"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV3UsersUserIdDataParams
	// ------------- Required query parameter "sig" -------------

	err = runtime.BindQueryParameter("form", true, true, "sig", ctx.QueryParams(), &params.Sig)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetV3UsersUserIdData(ctx, userId, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/data", wrapper.GetData)
	router.GET(baseURL+"/ping", wrapper.GetPing)
	router.GET(baseURL+"/rankings", wrapper.GetRankings)
	router.GET(baseURL+"/total_medals", wrapper.GetTotalMedals)
	router.GET(baseURL+"/users/:user_id/data", wrapper.GetUsersUserIdData)
	router.GET(baseURL+"/v2/data", wrapper.GetV2Data)
	router.GET(baseURL+"/v2/statistics", wrapper.GetV2Statistics)
	router.GET(baseURL+"/v2/users/:user_id/data", wrapper.GetV2UsersUserIdData)
	router.GET(baseURL+"/v3/data", wrapper.GetV3Data)
	router.GET(baseURL+"/v3/statistics", wrapper.GetV3Statistics)
	router.GET(baseURL+"/v3/users/:user_id/data", wrapper.GetV3UsersUserIdData)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
