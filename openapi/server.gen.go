// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	. "github.com/pikachu0310/very-big-medal-pusher-data-server/openapi/models"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// ゲームデータを送信 (非推奨)
	// (GET /data)
	GetData(ctx echo.Context, params GetDataParams) error
	// ヘルスチェック
	// (GET /ping)
	GetPing(ctx echo.Context) error
	// ランキングを取得 (非推奨)
	// (GET /rankings)
	GetRankings(ctx echo.Context, params GetRankingsParams) error
	// 全ユーザーのメダル総量を取得 (非推奨)
	// (GET /total_medals)
	GetTotalMedals(ctx echo.Context) error
	// ユーザーごとのゲームデータを取得 (非推奨)
	// (GET /users/{user_id}/data)
	GetUsersUserIdData(ctx echo.Context, userId string) error
	// セーブデータを送信 (v2・非推奨)
	// (GET /v2/data)
	GetV2Data(ctx echo.Context, params GetV2DataParams) error
	// グローバル統計を取得 (v2・非推奨)
	// (GET /v2/statistics)
	GetV2Statistics(ctx echo.Context) error
	// ユーザーの最新セーブデータを取得 (v2・非推奨)
	// (GET /v2/users/{user_id}/data)
	GetV2UsersUserIdData(ctx echo.Context, userId string) error
	// 実績取得率を取得
	// (GET /v3/achievements/rates)
	GetV3AchievementsRates(ctx echo.Context) error
	// セーブデータを送信 (v3)
	// (GET /v3/data)
	GetV3Data(ctx echo.Context, params GetV3DataParams) error
	// グローバル統計を取得 (v2・上位1000件)
	// (GET /v3/statistics)
	GetV3Statistics(ctx echo.Context) error
	// ユーザーの最新セーブデータを取得 (v3・署名付き)
	// (GET /v3/users/{user_id}/data)
	GetV3UsersUserIdData(ctx echo.Context, userId string, params GetV3UsersUserIdDataParams) error
	// 実績取得率を取得 (v4)
	// (GET /v4/achievements/rates)
	GetV4AchievementsRates(ctx echo.Context) error
	// セーブデータを送信 (v4)
	// (GET /v4/data)
	GetV4Data(ctx echo.Context, params GetV4DataParams) error
	// グローバル統計を取得 (v4・上位1000件・最適化版)
	// (GET /v4/statistics)
	GetV4Statistics(ctx echo.Context) error
	// ユーザーの最新セーブデータを取得 (v4・署名付き)
	// (GET /v4/users/{user_id}/data)
	GetV4UsersUserIdData(ctx echo.Context, userId string, params GetV4UsersUserIdDataParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetData converts echo context to params.
func (w *ServerInterfaceWrapper) GetData(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDataParams
	// ------------- Required query parameter "version" -------------

	err = runtime.BindQueryParameter("form", true, true, "version", ctx.QueryParams(), &params.Version)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter version: %s", err))
	}

	// ------------- Required query parameter "user_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "user_id", ctx.QueryParams(), &params.UserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// ------------- Required query parameter "have_medal" -------------

	err = runtime.BindQueryParameter("form", true, true, "have_medal", ctx.QueryParams(), &params.HaveMedal)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter have_medal: %s", err))
	}

	// ------------- Required query parameter "in_medal" -------------

	err = runtime.BindQueryParameter("form", true, true, "in_medal", ctx.QueryParams(), &params.InMedal)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter in_medal: %s", err))
	}

	// ------------- Required query parameter "out_medal" -------------

	err = runtime.BindQueryParameter("form", true, true, "out_medal", ctx.QueryParams(), &params.OutMedal)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter out_medal: %s", err))
	}

	// ------------- Required query parameter "slot_hit" -------------

	err = runtime.BindQueryParameter("form", true, true, "slot_hit", ctx.QueryParams(), &params.SlotHit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slot_hit: %s", err))
	}

	// ------------- Required query parameter "get_shirbe" -------------

	err = runtime.BindQueryParameter("form", true, true, "get_shirbe", ctx.QueryParams(), &params.GetShirbe)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter get_shirbe: %s", err))
	}

	// ------------- Required query parameter "start_slot" -------------

	err = runtime.BindQueryParameter("form", true, true, "start_slot", ctx.QueryParams(), &params.StartSlot)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter start_slot: %s", err))
	}

	// ------------- Required query parameter "shirbe_buy300" -------------

	err = runtime.BindQueryParameter("form", true, true, "shirbe_buy300", ctx.QueryParams(), &params.ShirbeBuy300)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter shirbe_buy300: %s", err))
	}

	// ------------- Required query parameter "medal_1" -------------

	err = runtime.BindQueryParameter("form", true, true, "medal_1", ctx.QueryParams(), &params.Medal1)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter medal_1: %s", err))
	}

	// ------------- Required query parameter "medal_2" -------------

	err = runtime.BindQueryParameter("form", true, true, "medal_2", ctx.QueryParams(), &params.Medal2)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter medal_2: %s", err))
	}

	// ------------- Required query parameter "medal_3" -------------

	err = runtime.BindQueryParameter("form", true, true, "medal_3", ctx.QueryParams(), &params.Medal3)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter medal_3: %s", err))
	}

	// ------------- Required query parameter "medal_4" -------------

	err = runtime.BindQueryParameter("form", true, true, "medal_4", ctx.QueryParams(), &params.Medal4)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter medal_4: %s", err))
	}

	// ------------- Required query parameter "medal_5" -------------

	err = runtime.BindQueryParameter("form", true, true, "medal_5", ctx.QueryParams(), &params.Medal5)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter medal_5: %s", err))
	}

	// ------------- Required query parameter "R_medal" -------------

	err = runtime.BindQueryParameter("form", true, true, "R_medal", ctx.QueryParams(), &params.RMedal)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter R_medal: %s", err))
	}

	// ------------- Required query parameter "total_play_time" -------------

	err = runtime.BindQueryParameter("form", true, true, "total_play_time", ctx.QueryParams(), &params.TotalPlayTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter total_play_time: %s", err))
	}

	// ------------- Required query parameter "fever" -------------

	err = runtime.BindQueryParameter("form", true, true, "fever", ctx.QueryParams(), &params.Fever)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fever: %s", err))
	}

	// ------------- Required query parameter "sig" -------------

	err = runtime.BindQueryParameter("form", true, true, "sig", ctx.QueryParams(), &params.Sig)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig: %s", err))
	}

	// ------------- Optional query parameter "max_chain_item" -------------

	err = runtime.BindQueryParameter("form", true, false, "max_chain_item", ctx.QueryParams(), &params.MaxChainItem)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max_chain_item: %s", err))
	}

	// ------------- Optional query parameter "max_chain_orange" -------------

	err = runtime.BindQueryParameter("form", true, false, "max_chain_orange", ctx.QueryParams(), &params.MaxChainOrange)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max_chain_orange: %s", err))
	}

	// ------------- Optional query parameter "max_chain_rainbow" -------------

	err = runtime.BindQueryParameter("form", true, false, "max_chain_rainbow", ctx.QueryParams(), &params.MaxChainRainbow)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max_chain_rainbow: %s", err))
	}

	// ------------- Optional query parameter "sugoroku_steps" -------------

	err = runtime.BindQueryParameter("form", true, false, "sugoroku_steps", ctx.QueryParams(), &params.SugorokuSteps)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sugoroku_steps: %s", err))
	}

	// ------------- Optional query parameter "jackpots" -------------

	err = runtime.BindQueryParameter("form", true, false, "jackpots", ctx.QueryParams(), &params.Jackpots)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter jackpots: %s", err))
	}

	// ------------- Optional query parameter "max_jackpot_win" -------------

	err = runtime.BindQueryParameter("form", true, false, "max_jackpot_win", ctx.QueryParams(), &params.MaxJackpotWin)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max_jackpot_win: %s", err))
	}

	// ------------- Optional query parameter "max_total_jackpot" -------------

	err = runtime.BindQueryParameter("form", true, false, "max_total_jackpot", ctx.QueryParams(), &params.MaxTotalJackpot)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max_total_jackpot: %s", err))
	}

	// ------------- Optional query parameter "max_total_ultimate" -------------

	err = runtime.BindQueryParameter("form", true, false, "max_total_ultimate", ctx.QueryParams(), &params.MaxTotalUltimate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max_total_ultimate: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetData(ctx, params)
	return err
}

// GetPing converts echo context to params.
func (w *ServerInterfaceWrapper) GetPing(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPing(ctx)
	return err
}

// GetRankings converts echo context to params.
func (w *ServerInterfaceWrapper) GetRankings(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRankingsParams
	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetRankings(ctx, params)
	return err
}

// GetTotalMedals converts echo context to params.
func (w *ServerInterfaceWrapper) GetTotalMedals(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTotalMedals(ctx)
	return err
}

// GetUsersUserIdData converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersUserIdData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", ctx.Param("user_id"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUsersUserIdData(ctx, userId)
	return err
}

// GetV2Data converts echo context to params.
func (w *ServerInterfaceWrapper) GetV2Data(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV2DataParams
	// ------------- Required query parameter "data" -------------

	err = runtime.BindQueryParameter("form", true, true, "data", ctx.QueryParams(), &params.Data)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter data: %s", err))
	}

	// ------------- Required query parameter "user_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "user_id", ctx.QueryParams(), &params.UserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// ------------- Required query parameter "sig" -------------

	err = runtime.BindQueryParameter("form", true, true, "sig", ctx.QueryParams(), &params.Sig)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetV2Data(ctx, params)
	return err
}

// GetV2Statistics converts echo context to params.
func (w *ServerInterfaceWrapper) GetV2Statistics(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetV2Statistics(ctx)
	return err
}

// GetV2UsersUserIdData converts echo context to params.
func (w *ServerInterfaceWrapper) GetV2UsersUserIdData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", ctx.Param("user_id"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetV2UsersUserIdData(ctx, userId)
	return err
}

// GetV3AchievementsRates converts echo context to params.
func (w *ServerInterfaceWrapper) GetV3AchievementsRates(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetV3AchievementsRates(ctx)
	return err
}

// GetV3Data converts echo context to params.
func (w *ServerInterfaceWrapper) GetV3Data(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV3DataParams
	// ------------- Required query parameter "data" -------------

	err = runtime.BindQueryParameter("form", true, true, "data", ctx.QueryParams(), &params.Data)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter data: %s", err))
	}

	// ------------- Required query parameter "user_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "user_id", ctx.QueryParams(), &params.UserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// ------------- Required query parameter "sig" -------------

	err = runtime.BindQueryParameter("form", true, true, "sig", ctx.QueryParams(), &params.Sig)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetV3Data(ctx, params)
	return err
}

// GetV3Statistics converts echo context to params.
func (w *ServerInterfaceWrapper) GetV3Statistics(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetV3Statistics(ctx)
	return err
}

// GetV3UsersUserIdData converts echo context to params.
func (w *ServerInterfaceWrapper) GetV3UsersUserIdData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", ctx.Param("user_id"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV3UsersUserIdDataParams
	// ------------- Required query parameter "sig" -------------

	err = runtime.BindQueryParameter("form", true, true, "sig", ctx.QueryParams(), &params.Sig)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetV3UsersUserIdData(ctx, userId, params)
	return err
}

// GetV4AchievementsRates converts echo context to params.
func (w *ServerInterfaceWrapper) GetV4AchievementsRates(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetV4AchievementsRates(ctx)
	return err
}

// GetV4Data converts echo context to params.
func (w *ServerInterfaceWrapper) GetV4Data(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV4DataParams
	// ------------- Required query parameter "data" -------------

	err = runtime.BindQueryParameter("form", true, true, "data", ctx.QueryParams(), &params.Data)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter data: %s", err))
	}

	// ------------- Required query parameter "user_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "user_id", ctx.QueryParams(), &params.UserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// ------------- Required query parameter "sig" -------------

	err = runtime.BindQueryParameter("form", true, true, "sig", ctx.QueryParams(), &params.Sig)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetV4Data(ctx, params)
	return err
}

// GetV4Statistics converts echo context to params.
func (w *ServerInterfaceWrapper) GetV4Statistics(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetV4Statistics(ctx)
	return err
}

// GetV4UsersUserIdData converts echo context to params.
func (w *ServerInterfaceWrapper) GetV4UsersUserIdData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", ctx.Param("user_id"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV4UsersUserIdDataParams
	// ------------- Required query parameter "sig" -------------

	err = runtime.BindQueryParameter("form", true, true, "sig", ctx.QueryParams(), &params.Sig)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetV4UsersUserIdData(ctx, userId, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/data", wrapper.GetData)
	router.GET(baseURL+"/ping", wrapper.GetPing)
	router.GET(baseURL+"/rankings", wrapper.GetRankings)
	router.GET(baseURL+"/total_medals", wrapper.GetTotalMedals)
	router.GET(baseURL+"/users/:user_id/data", wrapper.GetUsersUserIdData)
	router.GET(baseURL+"/v2/data", wrapper.GetV2Data)
	router.GET(baseURL+"/v2/statistics", wrapper.GetV2Statistics)
	router.GET(baseURL+"/v2/users/:user_id/data", wrapper.GetV2UsersUserIdData)
	router.GET(baseURL+"/v3/achievements/rates", wrapper.GetV3AchievementsRates)
	router.GET(baseURL+"/v3/data", wrapper.GetV3Data)
	router.GET(baseURL+"/v3/statistics", wrapper.GetV3Statistics)
	router.GET(baseURL+"/v3/users/:user_id/data", wrapper.GetV3UsersUserIdData)
	router.GET(baseURL+"/v4/achievements/rates", wrapper.GetV4AchievementsRates)
	router.GET(baseURL+"/v4/data", wrapper.GetV4Data)
	router.GET(baseURL+"/v4/statistics", wrapper.GetV4Statistics)
	router.GET(baseURL+"/v4/users/:user_id/data", wrapper.GetV4UsersUserIdData)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
