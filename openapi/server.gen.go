// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	. "github.com/pikachu0310/very-big-medal-pusher-data-server/openapi/models"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// ゲームデータを送信
	// (GET /data)
	GetData(ctx echo.Context, params GetDataParams) error
	// ヘルスチェック
	// (GET /ping)
	GetPing(ctx echo.Context) error
	// ランキングを取得
	// (GET /rankings)
	GetRankings(ctx echo.Context, params GetRankingsParams) error
	// 全ユーザーのメダル総量を取得
	// (GET /total_medals)
	GetTotalMedals(ctx echo.Context) error
	// ユーザーごとのゲームデータを取得
	// (GET /users/{user_id}/data)
	GetUsersUserIdData(ctx echo.Context, userId string) error
	// セーブデータを送信 (v2)
	// (GET /v2/data)
	GetV2Data(ctx echo.Context, params GetV2DataParams) error
	// グローバル統計を取得 (v2)
	// (GET /v2/statistics)
	GetV2Statistics(ctx echo.Context) error
	// ユーザーの最新セーブデータを取得 (v2)
	// (GET /v2/users/{user_id}/data)
	GetV2UsersUserIdData(ctx echo.Context, userId string) error
	// 実績取得率を取得
	// (GET /v3/achievements/rates)
	GetV3AchievementsRates(ctx echo.Context) error
	// セーブデータを送信 (v3)
	// (GET /v3/data)
	GetV3Data(ctx echo.Context, params GetV3DataParams) error
	// グローバル統計を取得 (v2・上位1000件)
	// (GET /v3/statistics)
	GetV3Statistics(ctx echo.Context) error
	// ユーザーの最新セーブデータを取得 (v3・署名付き)
	// (GET /v3/users/{user_id}/data)
	GetV3UsersUserIdData(ctx echo.Context, userId string, params GetV3UsersUserIdDataParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetData converts echo context to params.
func (w *ServerInterfaceWrapper) GetData(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDataParams
	// ------------- Required query parameter "version" -------------

	err = runtime.BindQueryParameter("form", true, true, "version", ctx.QueryParams(), &params.Version)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter version: %s", err))
	}

	// ------------- Required query parameter "user_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "user_id", ctx.QueryParams(), &params.UserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// ------------- Required query parameter "have_medal" -------------

	err = runtime.BindQueryParameter("form", true, true, "have_medal", ctx.QueryParams(), &params.HaveMedal)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter have_medal: %s", err))
	}

	// ------------- Required query parameter "in_medal" -------------

	err = runtime.BindQueryParameter("form", true, true, "in_medal", ctx.QueryParams(), &params.InMedal)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter in_medal: %s", err))
	}

	// ------------- Required query parameter "out_medal" -------------

	err = runtime.BindQueryParameter("form", true, true, "out_medal", ctx.QueryParams(), &params.OutMedal)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter out_medal: %s", err))
	}

	// ------------- Required query parameter "slot_hit" -------------

	err = runtime.BindQueryParameter("form", true, true, "slot_hit", ctx.QueryParams(), &params.SlotHit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slot_hit: %s", err))
	}

	// ------------- Required query parameter "get_shirbe" -------------

	err = runtime.BindQueryParameter("form", true, true, "get_shirbe", ctx.QueryParams(), &params.GetShirbe)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter get_shirbe: %s", err))
	}

	// ------------- Required query parameter "start_slot" -------------

	err = runtime.BindQueryParameter("form", true, true, "start_slot", ctx.QueryParams(), &params.StartSlot)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter start_slot: %s", err))
	}

	// ------------- Required query parameter "shirbe_buy300" -------------

	err = runtime.BindQueryParameter("form", true, true, "shirbe_buy300", ctx.QueryParams(), &params.ShirbeBuy300)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter shirbe_buy300: %s", err))
	}

	// ------------- Required query parameter "medal_1" -------------

	err = runtime.BindQueryParameter("form", true, true, "medal_1", ctx.QueryParams(), &params.Medal1)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter medal_1: %s", err))
	}

	// ------------- Required query parameter "medal_2" -------------

	err = runtime.BindQueryParameter("form", true, true, "medal_2", ctx.QueryParams(), &params.Medal2)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter medal_2: %s", err))
	}

	// ------------- Required query parameter "medal_3" -------------

	err = runtime.BindQueryParameter("form", true, true, "medal_3", ctx.QueryParams(), &params.Medal3)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter medal_3: %s", err))
	}

	// ------------- Required query parameter "medal_4" -------------

	err = runtime.BindQueryParameter("form", true, true, "medal_4", ctx.QueryParams(), &params.Medal4)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter medal_4: %s", err))
	}

	// ------------- Required query parameter "medal_5" -------------

	err = runtime.BindQueryParameter("form", true, true, "medal_5", ctx.QueryParams(), &params.Medal5)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter medal_5: %s", err))
	}

	// ------------- Required query parameter "R_medal" -------------

	err = runtime.BindQueryParameter("form", true, true, "R_medal", ctx.QueryParams(), &params.RMedal)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter R_medal: %s", err))
	}

	// ------------- Required query parameter "total_play_time" -------------

	err = runtime.BindQueryParameter("form", true, true, "total_play_time", ctx.QueryParams(), &params.TotalPlayTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter total_play_time: %s", err))
	}

	// ------------- Required query parameter "fever" -------------

	err = runtime.BindQueryParameter("form", true, true, "fever", ctx.QueryParams(), &params.Fever)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fever: %s", err))
	}

	// ------------- Required query parameter "sig" -------------

	err = runtime.BindQueryParameter("form", true, true, "sig", ctx.QueryParams(), &params.Sig)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig: %s", err))
	}

	// ------------- Optional query parameter "max_chain_item" -------------

	err = runtime.BindQueryParameter("form", true, false, "max_chain_item", ctx.QueryParams(), &params.MaxChainItem)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max_chain_item: %s", err))
	}

	// ------------- Optional query parameter "max_chain_orange" -------------

	err = runtime.BindQueryParameter("form", true, false, "max_chain_orange", ctx.QueryParams(), &params.MaxChainOrange)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max_chain_orange: %s", err))
	}

	// ------------- Optional query parameter "max_chain_rainbow" -------------

	err = runtime.BindQueryParameter("form", true, false, "max_chain_rainbow", ctx.QueryParams(), &params.MaxChainRainbow)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max_chain_rainbow: %s", err))
	}

	// ------------- Optional query parameter "sugoroku_steps" -------------

	err = runtime.BindQueryParameter("form", true, false, "sugoroku_steps", ctx.QueryParams(), &params.SugorokuSteps)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sugoroku_steps: %s", err))
	}

	// ------------- Optional query parameter "jackpots" -------------

	err = runtime.BindQueryParameter("form", true, false, "jackpots", ctx.QueryParams(), &params.Jackpots)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter jackpots: %s", err))
	}

	// ------------- Optional query parameter "max_jackpot_win" -------------

	err = runtime.BindQueryParameter("form", true, false, "max_jackpot_win", ctx.QueryParams(), &params.MaxJackpotWin)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max_jackpot_win: %s", err))
	}

	// ------------- Optional query parameter "max_total_jackpot" -------------

	err = runtime.BindQueryParameter("form", true, false, "max_total_jackpot", ctx.QueryParams(), &params.MaxTotalJackpot)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max_total_jackpot: %s", err))
	}

	// ------------- Optional query parameter "max_total_ultimate" -------------

	err = runtime.BindQueryParameter("form", true, false, "max_total_ultimate", ctx.QueryParams(), &params.MaxTotalUltimate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max_total_ultimate: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetData(ctx, params)
	return err
}

// GetPing converts echo context to params.
func (w *ServerInterfaceWrapper) GetPing(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPing(ctx)
	return err
}

// GetRankings converts echo context to params.
func (w *ServerInterfaceWrapper) GetRankings(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRankingsParams
	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetRankings(ctx, params)
	return err
}

// GetTotalMedals converts echo context to params.
func (w *ServerInterfaceWrapper) GetTotalMedals(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTotalMedals(ctx)
	return err
}

// GetUsersUserIdData converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersUserIdData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", ctx.Param("user_id"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUsersUserIdData(ctx, userId)
	return err
}

// GetV2Data converts echo context to params.
func (w *ServerInterfaceWrapper) GetV2Data(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV2DataParams
	// ------------- Required query parameter "data" -------------

	err = runtime.BindQueryParameter("form", true, true, "data", ctx.QueryParams(), &params.Data)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter data: %s", err))
	}

	// ------------- Required query parameter "user_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "user_id", ctx.QueryParams(), &params.UserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// ------------- Required query parameter "sig" -------------

	err = runtime.BindQueryParameter("form", true, true, "sig", ctx.QueryParams(), &params.Sig)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetV2Data(ctx, params)
	return err
}

// GetV2Statistics converts echo context to params.
func (w *ServerInterfaceWrapper) GetV2Statistics(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetV2Statistics(ctx)
	return err
}

// GetV2UsersUserIdData converts echo context to params.
func (w *ServerInterfaceWrapper) GetV2UsersUserIdData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", ctx.Param("user_id"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetV2UsersUserIdData(ctx, userId)
	return err
}

// GetV3AchievementsRates converts echo context to params.
func (w *ServerInterfaceWrapper) GetV3AchievementsRates(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetV3AchievementsRates(ctx)
	return err
}

// GetV3Data converts echo context to params.
func (w *ServerInterfaceWrapper) GetV3Data(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV3DataParams
	// ------------- Required query parameter "data" -------------

	err = runtime.BindQueryParameter("form", true, true, "data", ctx.QueryParams(), &params.Data)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter data: %s", err))
	}

	// ------------- Required query parameter "user_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "user_id", ctx.QueryParams(), &params.UserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// ------------- Required query parameter "sig" -------------

	err = runtime.BindQueryParameter("form", true, true, "sig", ctx.QueryParams(), &params.Sig)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetV3Data(ctx, params)
	return err
}

// GetV3Statistics converts echo context to params.
func (w *ServerInterfaceWrapper) GetV3Statistics(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetV3Statistics(ctx)
	return err
}

// GetV3UsersUserIdData converts echo context to params.
func (w *ServerInterfaceWrapper) GetV3UsersUserIdData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", ctx.Param("user_id"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV3UsersUserIdDataParams
	// ------------- Required query parameter "sig" -------------

	err = runtime.BindQueryParameter("form", true, true, "sig", ctx.QueryParams(), &params.Sig)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetV3UsersUserIdData(ctx, userId, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/data", wrapper.GetData)
	router.GET(baseURL+"/ping", wrapper.GetPing)
	router.GET(baseURL+"/rankings", wrapper.GetRankings)
	router.GET(baseURL+"/total_medals", wrapper.GetTotalMedals)
	router.GET(baseURL+"/users/:user_id/data", wrapper.GetUsersUserIdData)
	router.GET(baseURL+"/v2/data", wrapper.GetV2Data)
	router.GET(baseURL+"/v2/statistics", wrapper.GetV2Statistics)
	router.GET(baseURL+"/v2/users/:user_id/data", wrapper.GetV2UsersUserIdData)
	router.GET(baseURL+"/v3/achievements/rates", wrapper.GetV3AchievementsRates)
	router.GET(baseURL+"/v3/data", wrapper.GetV3Data)
	router.GET(baseURL+"/v3/statistics", wrapper.GetV3Statistics)
	router.GET(baseURL+"/v3/users/:user_id/data", wrapper.GetV3UsersUserIdData)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
