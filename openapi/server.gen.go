// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	. "github.com/pikachu0310/very-big-medal-pusher-data-server/openapi/models"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// ゲームデータを送信
	// (GET /data)
	GetData(ctx echo.Context, params GetDataParams) error
	// ヘルスチェック
	// (GET /ping)
	GetPing(ctx echo.Context) error
	// ランキングを取得
	// (GET /rankings)
	GetRankings(ctx echo.Context, params GetRankingsParams) error
	// 全ユーザーのメダル総量を取得
	// (GET /total_medals)
	GetTotalMedals(ctx echo.Context) error
	// ユーザーごとのゲームデータを取得
	// (GET /users/{user_id}/data)
	GetUsersUserIdData(ctx echo.Context, userId string) error
	// セーブデータを送信 (v2)
	// (GET /v2/data)
	GetV2Data(ctx echo.Context, params GetV2DataParams) error
	// グローバル統計を取得 (v2)
	// (GET /v2/statistics)
	GetV2Statistics(ctx echo.Context) error
	// ユーザーの最新セーブデータを取得 (v2)
	// (GET /v2/users/{user_id}/data)
	GetV2UsersUserIdData(ctx echo.Context, userId string) error
	// 実績取得率を取得
	// (GET /v3/achievements/rates)
	GetV3AchievementsRates(ctx echo.Context) error
	// セーブデータを送信 (v3)
	// (GET /v3/data)
	GetV3Data(ctx echo.Context, params GetV3DataParams) error
	// グローバル統計を取得 (v2・上位1000件)
	// (GET /v3/statistics)
	GetV3Statistics(ctx echo.Context) error
	// ユーザーの最新セーブデータを取得 (v3・署名付き)
	// (GET /v3/users/{user_id}/data)
	GetV3UsersUserIdData(ctx echo.Context, userId string, params GetV3UsersUserIdDataParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetData converts echo context to params.
func (w *ServerInterfaceWrapper) GetData(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDataParams
	// ------------- Required query parameter "version" -------------

	err = runtime.BindQueryParameter("form", true, true, "version", ctx.QueryParams(), &params.Version)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter version: %s", err))
	}

	// ------------- Required query parameter "user_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "user_id", ctx.QueryParams(), &params.UserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// ------------- Required query parameter "have_medal" -------------

	err = runtime.BindQueryParameter("form", true, true, "have_medal", ctx.QueryParams(), &params.HaveMedal)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter have_medal: %s", err))
	}

	// ------------- Required query parameter "in_medal" -------------

	err = runtime.BindQueryParameter("form", true, true, "in_medal", ctx.QueryParams(), &params.InMedal)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter in_medal: %s", err))
	}

	// ------------- Required query parameter "out_medal" -------------

	err = runtime.BindQueryParameter("form", true, true, "out_medal", ctx.QueryParams(), &params.OutMedal)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter out_medal: %s", err))
	}

	// ------------- Required query parameter "slot_hit" -------------

	err = runtime.BindQueryParameter("form", true, true, "slot_hit", ctx.QueryParams(), &params.SlotHit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slot_hit: %s", err))
	}

	// ------------- Required query parameter "get_shirbe" -------------

	err = runtime.BindQueryParameter("form", true, true, "get_shirbe", ctx.QueryParams(), &params.GetShirbe)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter get_shirbe: %s", err))
	}

	// ------------- Required query parameter "start_slot" -------------

	err = runtime.BindQueryParameter("form", true, true, "start_slot", ctx.QueryParams(), &params.StartSlot)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter start_slot: %s", err))
	}

	// ------------- Required query parameter "shirbe_buy300" -------------

	err = runtime.BindQueryParameter("form", true, true, "shirbe_buy300", ctx.QueryParams(), &params.ShirbeBuy300)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter shirbe_buy300: %s", err))
	}

	// ------------- Required query parameter "medal_1" -------------

	err = runtime.BindQueryParameter("form", true, true, "medal_1", ctx.QueryParams(), &params.Medal1)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter medal_1: %s", err))
	}

	// ------------- Required query parameter "medal_2" -------------

	err = runtime.BindQueryParameter("form", true, true, "medal_2", ctx.QueryParams(), &params.Medal2)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter medal_2: %s", err))
	}

	// ------------- Required query parameter "medal_3" -------------

	err = runtime.BindQueryParameter("form", true, true, "medal_3", ctx.QueryParams(), &params.Medal3)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter medal_3: %s", err))
	}

	// ------------- Required query parameter "medal_4" -------------

	err = runtime.BindQueryParameter("form", true, true, "medal_4", ctx.QueryParams(), &params.Medal4)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter medal_4: %s", err))
	}

	// ------------- Required query parameter "medal_5" -------------

	err = runtime.BindQueryParameter("form", true, true, "medal_5", ctx.QueryParams(), &params.Medal5)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter medal_5: %s", err))
	}

	// ------------- Required query parameter "R_medal" -------------

	err = runtime.BindQueryParameter("form", true, true, "R_medal", ctx.QueryParams(), &params.RMedal)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter R_medal: %s", err))
	}

	// ------------- Required query parameter "total_play_time" -------------

	err = runtime.BindQueryParameter("form", true, true, "total_play_time", ctx.QueryParams(), &params.TotalPlayTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter total_play_time: %s", err))
	}

	// ------------- Required query parameter "fever" -------------

	err = runtime.BindQueryParameter("form", true, true, "fever", ctx.QueryParams(), &params.Fever)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fever: %s", err))
	}

	// ------------- Required query parameter "sig" -------------

	err = runtime.BindQueryParameter("form", true, true, "sig", ctx.QueryParams(), &params.Sig)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig: %s", err))
	}

	// ------------- Optional query parameter "max_chain_item" -------------

	err = runtime.BindQueryParameter("form", true, false, "max_chain_item", ctx.QueryParams(), &params.MaxChainItem)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max_chain_item: %s", err))
	}

	// ------------- Optional query parameter "max_chain_orange" -------------

	err = runtime.BindQueryParameter("form", true, false, "max_chain_orange", ctx.QueryParams(), &params.MaxChainOrange)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max_chain_orange: %s", err))
	}

	// ------------- Optional query parameter "max_chain_rainbow" -------------

	err = runtime.BindQueryParameter("form", true, false, "max_chain_rainbow", ctx.QueryParams(), &params.MaxChainRainbow)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max_chain_rainbow: %s", err))
	}

	// ------------- Optional query parameter "sugoroku_steps" -------------

	err = runtime.BindQueryParameter("form", true, false, "sugoroku_steps", ctx.QueryParams(), &params.SugorokuSteps)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sugoroku_steps: %s", err))
	}

	// ------------- Optional query parameter "jackpots" -------------

	err = runtime.BindQueryParameter("form", true, false, "jackpots", ctx.QueryParams(), &params.Jackpots)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter jackpots: %s", err))
	}

	// ------------- Optional query parameter "max_jackpot_win" -------------

	err = runtime.BindQueryParameter("form", true, false, "max_jackpot_win", ctx.QueryParams(), &params.MaxJackpotWin)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max_jackpot_win: %s", err))
	}

	// ------------- Optional query parameter "max_total_jackpot" -------------

	err = runtime.BindQueryParameter("form", true, false, "max_total_jackpot", ctx.QueryParams(), &params.MaxTotalJackpot)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max_total_jackpot: %s", err))
	}

	// ------------- Optional query parameter "max_total_ultimate" -------------

	err = runtime.BindQueryParameter("form", true, false, "max_total_ultimate", ctx.QueryParams(), &params.MaxTotalUltimate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max_total_ultimate: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetData(ctx, params)
	return err
}

// GetPing converts echo context to params.
func (w *ServerInterfaceWrapper) GetPing(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPing(ctx)
	return err
}

// GetRankings converts echo context to params.
func (w *ServerInterfaceWrapper) GetRankings(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRankingsParams
	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetRankings(ctx, params)
	return err
}

// GetTotalMedals converts echo context to params.
func (w *ServerInterfaceWrapper) GetTotalMedals(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTotalMedals(ctx)
	return err
}

// GetUsersUserIdData converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersUserIdData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", ctx.Param("user_id"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUsersUserIdData(ctx, userId)
	return err
}

// GetV2Data converts echo context to params.
func (w *ServerInterfaceWrapper) GetV2Data(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV2DataParams
	// ------------- Required query parameter "data" -------------

	err = runtime.BindQueryParameter("form", true, true, "data", ctx.QueryParams(), &params.Data)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter data: %s", err))
	}

	// ------------- Required query parameter "user_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "user_id", ctx.QueryParams(), &params.UserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// ------------- Required query parameter "sig" -------------

	err = runtime.BindQueryParameter("form", true, true, "sig", ctx.QueryParams(), &params.Sig)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetV2Data(ctx, params)
	return err
}

// GetV2Statistics converts echo context to params.
func (w *ServerInterfaceWrapper) GetV2Statistics(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetV2Statistics(ctx)
	return err
}

// GetV2UsersUserIdData converts echo context to params.
func (w *ServerInterfaceWrapper) GetV2UsersUserIdData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", ctx.Param("user_id"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetV2UsersUserIdData(ctx, userId)
	return err
}

// GetV3AchievementsRates converts echo context to params.
func (w *ServerInterfaceWrapper) GetV3AchievementsRates(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetV3AchievementsRates(ctx)
	return err
}

// GetV3Data converts echo context to params.
func (w *ServerInterfaceWrapper) GetV3Data(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV3DataParams
	// ------------- Required query parameter "data" -------------

	err = runtime.BindQueryParameter("form", true, true, "data", ctx.QueryParams(), &params.Data)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter data: %s", err))
	}

	// ------------- Required query parameter "user_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "user_id", ctx.QueryParams(), &params.UserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// ------------- Required query parameter "sig" -------------

	err = runtime.BindQueryParameter("form", true, true, "sig", ctx.QueryParams(), &params.Sig)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetV3Data(ctx, params)
	return err
}

// GetV3Statistics converts echo context to params.
func (w *ServerInterfaceWrapper) GetV3Statistics(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetV3Statistics(ctx)
	return err
}

// GetV3UsersUserIdData converts echo context to params.
func (w *ServerInterfaceWrapper) GetV3UsersUserIdData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", ctx.Param("user_id"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV3UsersUserIdDataParams
	// ------------- Required query parameter "sig" -------------

	err = runtime.BindQueryParameter("form", true, true, "sig", ctx.QueryParams(), &params.Sig)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetV3UsersUserIdData(ctx, userId, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/data", wrapper.GetData)
	router.GET(baseURL+"/ping", wrapper.GetPing)
	router.GET(baseURL+"/rankings", wrapper.GetRankings)
	router.GET(baseURL+"/total_medals", wrapper.GetTotalMedals)
	router.GET(baseURL+"/users/:user_id/data", wrapper.GetUsersUserIdData)
	router.GET(baseURL+"/v2/data", wrapper.GetV2Data)
	router.GET(baseURL+"/v2/statistics", wrapper.GetV2Statistics)
	router.GET(baseURL+"/v2/users/:user_id/data", wrapper.GetV2UsersUserIdData)
	router.GET(baseURL+"/v3/achievements/rates", wrapper.GetV3AchievementsRates)
	router.GET(baseURL+"/v3/data", wrapper.GetV3Data)
	router.GET(baseURL+"/v3/statistics", wrapper.GetV3Statistics)
	router.GET(baseURL+"/v3/users/:user_id/data", wrapper.GetV3UsersUserIdData)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"///HmiIXUTsAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
