// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package db

import (
	"context"
)

const authenticateUser = `-- name: AuthenticateUser :one
SELECT id, username, password, created_at
FROM users
WHERE username = $1
  AND password = $2
LIMIT 1
`

func (q *Queries) AuthenticateUser(ctx context.Context) (User, error) {
	row := q.db.QueryRowContext(ctx, authenticateUser)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.CreatedAt,
	)
	return i, err
}

const createUser = `-- name: CreateUser :exec
INSERT INTO users (username, password)
VALUES ($1, $2)
`

func (q *Queries) CreateUser(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, createUser)
	return err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, username, password, created_at
FROM users
WHERE id = LAST_INSERT_ID()
`

func (q *Queries) GetUserByID(ctx context.Context) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.CreatedAt,
	)
	return i, err
}
